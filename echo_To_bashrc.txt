#!/bin/bash
###### echo_To_bashrc.txt   start 
###echo_To_bashrc_txt_unique_id

##cd /data
country_code_file=~/.country_code

if [ -f "$country_code_file" ]; then
  export country_code=$(cat "$country_code_file")
else 
  export country_code=$(curl -s http://ip-api.com/line/?fields=countryCode)
  echo "$country_code" > "$country_code_file"
fi


######  eval "$(oh-my-posh init bash --config /root/themes/gmay3.omp.json)"

export EDITOR=/usr/bin/vim
#######export setup_time_first="${date}"
###########echo  export setup_time_first=\"`date`\"   >> ~/.bashrc 
#######  echo  "export setup_time_first=\"$(date)\""   >> ~/.bashrc

function setup_time() {
    setup_time_first_seconds=$(date -d "$setup_time_first" +%s)
    current_time_seconds=$(date +%s)
    time_difference=$((current_time_seconds - setup_time_first_seconds))
    days=$((time_difference / 86400))
    hours=$(( (time_difference % 86400) / 3600 ))
    minutes=$(( (time_difference % 3600) / 60 ))
    seconds=$((time_difference % 60))
    echo "$days days, $hours hours, $minutes minutes, $seconds seconds"
}

export -f setup_time
###html_content=$(curl -m 10 -s 'http://www.weather.com.cn/weather/101040100.shtml')
###weather=$(echo "$html_content" |   grep -oP '(?<=class="wea">).*?(?=</p>)' |head -n2 | tr '\n' ';' | sed 's/;$//'  )
###weather=$(echo $weather | tr ';' '_')
###temperature=$(echo "$html_content" | grep -oP '(?<=<i>).*?(?=℃</i>)' |head -n 1 ) 
###we_temp="${temperature}°C ${weather}"
#####weather_temperature="${temperature}°C ${weather}"
#####export weather_temperature="${temperature}°C ${weather}"
###export weather_temperature="${temperature}${weather}"
###
#####alias wea='source <(curl -sSL https://raw.githubusercontent.com/HelloWorldWinning/vps/main/weather_temperature.sh)'


alias hfc='huggingface-cli'
alias we='curl -m 6  wttr.in/shapingba'
alias ca='calcurse'
alias nf='neofetch'

# find . -mindepth 1 -maxdepth 1 -exec du -sh {} + | sort -h
#alias zz='du  -sh * |sort -h'
#alias zz='du -sh ./* ./.??* | sort -h'
###alias zz='find . -mindepth 1 -maxdepth 1 -exec du -sh {} + | sort -h | exa -l --sort newest'
########alias zz='find . -mindepth 1 -maxdepth 1 -exec du -sh {} + | sort -h | sed "s/.\///"'
########## alias zz='function _zz() { dir="${1:-.}"; find "$dir" -mindepth 1 -maxdepth 1 -exec du -sh {} + | sort -h | sed "s|^\./||"; }; _zz'
#alias zz='function _zz() { 
#  dir="${1:-.}"; 
#  find "$dir" -mindepth 1 -maxdepth 1 -exec du -sh {} + | sort -h | while read -r size path; do 
#    full_path=$(realpath "$path" | sed "s|//|/|g")  # Remove double slashes
#    name=$(basename "$full_path")
#    if [ -d "$path" ]; then
#      # Red and bold for folder name
#      printf "%s\t%s\033[1;31m%s\033[0m/\n" "$size" "$(dirname "$full_path")/" "$name"
#    else
#      # Bright green (#00FF00) and bold for file name
#      printf "%s\t%s\033[38;5;82m%s\033[0m\n" "$size" "$(dirname "$full_path")/" "$name"
#    fi
#  done
#}; _zz'
#
#
alias zz='function _zz() { 
  dir="${1:-.}"; 
  padding1="\t\t"       # Customize padding1 for column alignment
  space1="\t\t"            # Customize space1 for additional spacing
  
  find "$dir" -mindepth 1 -maxdepth 1 -exec du -sh {} + | sort -h | while read -r size path; do 
    full_path=$(realpath "$path" | sed "s|//|/|g")  # Remove double slashes
    name=$(basename "$full_path")
    
    if [ -d "$path" ]; then
      # Red and bold for folder name
      printf "${padding1}%s${space1}%s\033[1;31m%s\033[0m/\n" "$size" "$(dirname "$full_path")/" "$name"
    else
      # Bright green (#00FF00) and bold for file name
      printf "${padding1}%s${space1}%s\033[38;5;82m%s\033[0m\n" "$size" "$(dirname "$full_path")/" "$name"
    fi
  done
}; _zz'






alias ft='freqtrade'
alias v='vim'
alias V='vim'
alias c='clear'


alias l='exa -la --sort=changed'
alias lss='/usr/bin/ls '

alias cc='exa -la --sort=created'
alias s='exa -la --sort=size'
alias n='exa -la'
alias ls='exa -a'
alias tree='exa -Tla'
alias t='exa -lT -L 2'

alias fw='/usr/lib/cargo/bin/fd --changed-within   '


alias nu='ncdu'
alias dff='ncdu'



##alias l='ls -lrth'
##alias s='ls -lhSr'
##alias nm='ls -lh'
##alias ln='ls -lh'



alias p='python'
alias _GP='git  pull'

alias _G='git add . && git commit -m  "$(date)" && git push ;echo " ";date;echo " "'
alias _F='git pull && git add . && git commit -m "$(date)"  && git push ;echo " ";date;echo " "'

#alias nn='/usr/bin/nvim.appimage'
alias k='/usr/bin/nvim.appimage'
#alias _ai='docker ps --format "{{.Names}}" |grep  "code_love_bot\|Codex_openai_bot\|openAI_Smart_Wisdom\|text_davinci_003_high_bot\|text_davinci_003_low_bot" |xargs -I {} docker restart {}'

export OPENAI_API_KEY=${OPENAI_API_KEY}
export HF_TOKEN=""



alias dc='docker compose ' 
alias d='docker '
##alias cc='bash  <(curl -Ls4  bit.ly/myvpsjingyi)'
alias f='bash  <(curl -Ls4   https://raw.githubusercontent.com/HelloWorldWinning/vps/main/goodv3.sh   )'

##bash  <(curl --ipv4 -Ls https://raw.githubusercontent.com/HelloWorldWinning/vps/main/sys_info.sh  )
##bash  <(curl --ipv4 -Ls https://raw.githubusercontent.com/HelloWorldWinning/vps/main/ip_check2.sh  ) 

#bash  <(curl --ipv4 -Ls https://raw.githubusercontent.com/HelloWorldWinning/vps/main/ip_check2_simple.sh  ) </dev/null
#bash  <(curl --ipv4 -Ls https://raw.githubusercontent.com/HelloWorldWinning/vps/main/ip_check2.sh  ) </dev/null




#if [ "$TERM_PROGRAM" = "Apple_Terminal" ]; then
#if true; then




tag_tmux=细
if [ -n "$SSH_CONNECTION" ] && [ "$TERM_PROGRAM" != "vscode" ]; then
    # Check if a tmux session named "${tag_tmux}" exists
    tmux has-session -t "${tag_tmux}" &>/dev/null
    if [ $? -ne 0 ]; then
        # If the session ${tag_tmux}es not exist, create it
        tmux new-session -s "${tag_tmux}" -d
    fi
    # If we are not already inside a tmux session, attach to the "${tag_tmux}" session
    if [ -z "$TMUX" ]; then
        tmux attach -t "${tag_tmux}"
    fi
fi








#if [ -n "$SSH_CONNECTION" ] && [ "$TERM_PROGRAM" != "vscode" ]; then
#    # Check if a tmux session named "do" exists
#    tmux has-session -t "do" &>/dev/null
#    if [ $? -ne 0 ]; then
#        # If the session does not exist, create it
#        tmux new-session -s "do" -d
#    fi
#    # If we are not already inside a tmux session, attach to the "do" session
#    if [ -z "$TMUX" ]; then
#        tmux attach -t "do"
#    fi
#fi

#if [ -n "$SSH_CONNECTION" ] && [ "$TERM_PROGRAM" = "vscode" ]; then
#    # Check if a tmux session named "vscode" exists
#    tmux has-session -t vscode &>/dev/null
#    if [ $? -ne 0 ]; then
#        # If the session does not exist, create it
#        tmux new-session -s vscode -d
#    fi
#    # If we are not already inside a tmux session, attach to the "vscode" session
#    if [ -z "$TMUX" ]; then
#        tmux attach -t vscode
#    fi
#fi
#

if [ -n "$SSH_CONNECTION" ] && [ "$TERM_PROGRAM" = "vscode" ]; then
    # Check if a tmux session named "vscode" exists
    tmux has-session -t vscode &>/dev/null
    if [ $? -ne 0 ]; then # Fixed the condition to properly check the exit status
        # If the session does not exist, create it
        tmux new-session -s vscode -d
    fi
    # If we are not already inside a tmux session, attach to the "vscode" session
    if [ -z "$TMUX" ]; then # Correctly check the $TMUX variable to ensure not already in a session
        tmux attach -t vscode
    fi
fi



###############
get_git_branch_name() {
    # Check if Git command exists
    if ! command -v git &> /dev/null; then
        echo "Error: Git is not installed."
        return 1
    fi

    # Use Git to determine if we're in a Git repository
    if ! git rev-parse --is-inside-work-tree &> /dev/null; then
       #echo "Error: Not a git repository."
        echo ""
        return 0
    fi

    # Use git symbolic-ref or git describe to retrieve the current branch name
    local branch_name=$(git symbolic-ref -q HEAD || git describe --tags --exact-match 2>/dev/null)
    # Remove the 'refs/heads/' from the full ref name
    branch_name=${branch_name##refs/heads/}

    # Check if we got a branch name
    if [ -n "$branch_name" ]; then
        echo "$branch_name"
    else
        echo "Error: Currently not on any branch."
        return 1
    fi
}




alias nbc='jupyter nbconvert --to script --no-prompt --ClearOutputPreprocessor.enabled=True '
alias pyc='sed -i -e '/^#/d' -e '/^$/d''

export PATH="/root/anaconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin"

#### eval "$(oh-my-posh init bash --config /root/themes/gmay3.omp.json)"

alias wea='source <(curl -sSL https://raw.githubusercontent.com/HelloWorldWinning/vps/main/weather_temperature.sh)'  


alias agi='ag --ignore-dir   '



fdt() {
  if [ $# -eq 0 ]; then
    echo "Usage: fdt <search_pattern>"
    return 1
  fi

  fd "$1" | xargs exa -lh --sort newest
}

fds() {
  if [ $# -eq 0 ]; then
    echo "Usage: fds <search_pattern>"
    return 1
  fi

  fd "$1" | xargs exa -lh --sort size
}


# o1
#ee() {
#    if [ "$#" -lt 1 ]; then
#        echo "Usage: ee <search_term> [additional_terms...]"
#        return 1
#    fi
#
#    local search_term="$1"
#    shift
#    local additional_terms=("$@")
#
#    # Define ANSI color codes using ANSI-C quoting
#    local RED=$'\033[31m'
#    local RESET=$'\033[0m'
#
#    /usr/local/bin/fd --absolute-path --color=never "$search_term" "${additional_terms[@]}" | \
#    rg --color=never "$search_term" | \
#    sed "s|\(/[^/]*${search_term}[^/]*\)|${RED}\1${RESET}|g"
#}

export EXA_COLORS="di=35;1:fi=38;5;82"  
####export FD_COLORS="hl=1;31"



alias m='mkdir '

echo ""
exa -la --sort=changed



####### alias ll='find . -maxdepth 1 -type f -printf "%f\0" | xargs -0 exa --long --sort=newest --no-user --no-permissions --git --header --color=always --group-directories-first --classify'

alias ll='exa --long --sort=newest --no-user --no-permissions --git --header --color=always --group-directories-first --classify --no-icons | grep -v "/$"'


alias ff='exa --only-dirs --long --bytes --sort=newest --no-user --no-permissions --git --header --color=always --group-directories-first --classify'

alias b='bat '
alias m='mkdir '
alias rm='rm -i'

export HISTSIZE=-1
export HISTFILESIZE=-1


####  eval "$(oh-my-posh init bash --config /root/themes/gmay3.omp.json)"

alias rg='/usr/bin/rg   --colors path:fg:Red --color always --colors "match:fg:cyan" --colors "match:style:nobold"'
#alias rg='/usr/bin/rg   --colors path:fg:Yellow   --color always --colors "match:fg:cyan" --colors "match:style:nobold"'
######   echo_To_bashrc.txt  end


alias fd='/usr/lib/cargo/bin/fd  -H  --absolute-path --color always '
e() {
    if [ "$#" -lt 1 ]; then
        echo "Usage: fd_func <search_term> [additional_terms...]"
        return 1
    fi
    local search_term="$1"
    shift
    local additional_terms=("$@")
 #  /usr/local/bin/fd --absolute-path --color=never "$search_term" "${additional_terms[@]}" | \
    /usr/lib/cargo/bin/fd  -H  --absolute-path --color=never "$search_term" "${additional_terms[@]}" | \
        rg --color=always \
           --colors 'match:fg:yellow' \
           --colors 'line:none' \
           --regexp "[^/]*${search_term}[^/]*"
}


eee() {
    if [ "$#" -lt 1 ]; then
        echo "Usage: fd_func <search_term> [additional_terms...]"
        return 1
    fi
    local search_term="$1"
    shift
    local additional_terms=("$@")
    /usr/lib/cargo/bin/fd --list-details  --strip-cwd-prefix  --color=never  "$search_term" "${additional_terms[@]}" | \
        rg --color=always \
           --colors 'match:fg:yellow' \
           --colors 'line:none' \
           --regexp "[^/]*${search_term}[^/]*"
}



ee() {
    # Define usage function
    usage() {
        echo "Usage: eee [-t|-T|-s|-S] <search_term> [additional_terms...]"
        echo "  -t : sort by time, latest at bottom (default)"
        echo "  -T : sort by time, latest at top"
        echo "  -s : sort by size, largest at bottom"
        echo "  -S : sort by size, largest at top"
        return 1
    }

    # Parse options
    local sort_type="-t"  # default sort
    if [[ "$1" == -[tTsS] ]]; then
        sort_type="$1"
        shift
    fi

    # Check for search term
    if [ "$#" -lt 1 ]; then
        usage
        return 1
    fi

    local search_term="$1"
    shift
    local additional_terms=("$@")

    # Create temporary file
    local tmp_file=$(mktemp)
    trap 'rm -f "$tmp_file"' EXIT

    # Step 1: Collect all matches using the original ee function's core
    /usr/lib/cargo/bin/fd --list-details --strip-cwd-prefix --color=never "$search_term" "${additional_terms[@]}" | \
        rg --color=never --regexp "[^/]*${search_term}[^/]*" > "$tmp_file"

    # Step 2: Process and sort the results
    while IFS= read -r line; do
        # Extract components (permissions, links, owner, group, size, date, time, path)
        local perms=$(echo "$line" | awk '{print $1}')
        local links=$(echo "$line" | awk '{print $2}')
        local owner=$(echo "$line" | awk '{print $3}')
        local group=$(echo "$line" | awk '{print $4}')
        local size_raw=$(echo "$line" | awk '{print $5}')
        local month=$(echo "$line" | awk '{print $6}')
        local day=$(echo "$line" | awk '{print $7}')
        local time=$(echo "$line" | awk '{print $8}')
        local path=$(echo "$line" | awk '{$1=$2=$3=$4=$5=$6=$7=$8=""; print substr($0,9)}')

        # Convert size to bytes using awk for decimal support
        local size_in_bytes
        if [[ $size_raw =~ ^[0-9.]+[KMG]?$ ]]; then
            size_in_bytes=$(echo "$size_raw" | awk '
                function convert(size) {
                    if (size ~ /K$/) return substr(size, 1, length(size)-1) * 1024
                    if (size ~ /M$/) return substr(size, 1, length(size)-1) * 1024 * 1024
                    if (size ~ /G$/) return substr(size, 1, length(size)-1) * 1024 * 1024 * 1024
                    return size
                }
                { printf "%.0f", convert($1) }
            ')
        else
            size_in_bytes=0
        fi

        # Convert date to timestamp (handling current year)
        local year=$(date +%Y)
        local month_num=$(date -d "$month 1" +%m 2>/dev/null || echo "01")
        local timestamp=$(date -d "$year-$month_num-$day $time" +%s 2>/dev/null || echo "0")

        # Print with sort key based on sort type
        case "$sort_type" in
            -t|-T) echo "$timestamp|$line" ;;
            -s|-S) echo "$size_in_bytes|$line" ;;
        esac
    done < "$tmp_file" | {
        case "$sort_type" in
            -t)  sort -n ;;
            -T)  sort -nr ;;
            -s)  sort -n ;;
            -S)  sort -nr ;;
        esac
    } | cut -d'|' -f2- | \
    rg --color=always \
       --colors 'match:fg:yellow' \
       --colors 'line:none' \
       --regexp "[^/]*${search_term}[^/]*"
}
