name: affine

services:
  affine:
    image: ghcr.io/toeverything/affine:stable
    container_name: affine_server
    ports:
      - '3010:3010'
    depends_on:
      redis:
        condition: service_healthy
      postgres:
        condition: service_healthy
      affine_migration:
        condition: service_completed_successfully
    volumes:
      - ./self-host/storage:/root/.affine/storage
      - ./self-host/config:/root/.affine/config
    environment:
      # Core service connections
      REDIS_SERVER_HOST: redis
      DATABASE_URL: postgresql://affine:affine_password@postgres:5432/affine
      AFFINE_INDEXER_ENABLED: 'false'
      
      # Optional: Uncomment and configure for production deployment
      # AFFINE_SERVER_HTTPS: 'true'
      # AFFINE_SERVER_HOST: affine.yourdomain.com
      # AFFINE_SERVER_EXTERNAL_URL: https://affine.yourdomain.com
      
      # Optional: Performance tuning
      # NODE_OPTIONS: '--max-old-space-size=4096'
    restart: unless-stopped
    healthcheck:
      test: ['CMD', 'node', '--eval', "require('http').get('http://localhost:3010/api/healthz')"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  affine_migration:
    image: ghcr.io/toeverything/affine:stable
    container_name: affine_migration_job
    volumes:
      - ./self-host/storage:/root/.affine/storage
      - ./self-host/config:/root/.affine/config
    command: ['sh', '-c', 'node ./scripts/self-host-predeploy.js']
    environment:
      REDIS_SERVER_HOST: redis
      DATABASE_URL: postgresql://affine:affine_password@postgres:5432/affine
      AFFINE_INDEXER_ENABLED: 'false'
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy

  redis:
    image: redis:7-alpine
    container_name: affine_redis
    volumes:
      # Persist Redis data for session/cache durability
      - ./self-host/redis:/data
    command: redis-server --appendonly yes --appendfsync everysec
    healthcheck:
      test: ['CMD', 'redis-cli', '--raw', 'incr', 'ping']
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  postgres:
    image: pgvector/pgvector:pg16
    container_name: affine_postgres
    volumes:
      # Cleaner directory structure: pgdata subfolder
      - ./self-host/postgres/pgdata:/var/lib/postgresql/data
    environment:
      POSTGRES_USER: affine
      POSTGRES_PASSWORD: affine_password
      POSTGRES_DB: affine
      POSTGRES_INITDB_ARGS: '--data-checksums'
      # Performance tuning for typical workloads
      # Uncomment and adjust based on your server resources
      # POSTGRES_SHARED_BUFFERS: 256MB
      # POSTGRES_EFFECTIVE_CACHE_SIZE: 1GB
    healthcheck:
      test: ['CMD', 'pg_isready', '-U', 'affine', '-d', 'affine']
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped
    # Prevent OOM kills in production
    shm_size: 128mb

# Optional: Create a dedicated network for better isolation
# Uncomment if you want explicit network control
# networks:
#   affine_network:
#     driver: bridge

# Optional: Apply to all services for network isolation
# services:
#   affine:
#     networks:
#       - affine_network
#   ... (add to each service)
