// State management
let highlights = [];
let filteredHighlights = [];
let currentHighlightIndex = -1;  // Track current highlight
let highlightHistory = [];       // Array to store navigation history
let historyPosition = -1;        // Current position in history
let filters = {
    bookTitle: 'all',
    bookAuthor: 'all',
    tags: 'all',
    color: 'all'
};

// DOM Elements
const highlightText = document.getElementById('highlightText');
const noteContent = document.getElementById('note');
const bookTitleSelect = document.getElementById('bookTitle');
const bookAuthorSelect = document.getElementById('bookAuthor');
const bookTagsSelect = document.getElementById('bookTags');
const highlightColorSelect = document.getElementById('highlightColor');
const highlightContainer = document.querySelector('.highlight-container');

// Helper function to get random index different from current
function getNewRandomIndex(max, currentIndex) {
    if (max <= 1) return 0;  // If only one item, return it
    
    let newIndex;
    do {
        newIndex = Math.floor(Math.random() * max);
    } while (newIndex === currentIndex);
    
    return newIndex;
}

// Helper function to update grid layout based on note content
function updateGridLayout(hasNote) {
    if (hasNote) {
        highlightContainer.classList.remove('no-notes');
    } else {
        highlightContainer.classList.add('no-notes');
    }
}

// Fetch and populate filter options
async function loadFilters() {
    try {
        const response = await fetch('/api/filters');
        const data = await response.json();

        // Populate book titles
        data.bookTitles.forEach(title => {
            const option = document.createElement('option');
            option.value = title;
            option.textContent = title;
            bookTitleSelect.appendChild(option);
        });

        // Populate authors
        data.bookAuthors.forEach(author => {
            const option = document.createElement('option');
            option.value = author;
            option.textContent = author;
            bookAuthorSelect.appendChild(option);
        });

        // Populate tags
        data.tags.forEach(tag => {
            const option = document.createElement('option');
            option.value = tag;
            option.textContent = tag;
            bookTagsSelect.appendChild(option);
        });

        // Populate colors
        data.colors.forEach(color => {
            const option = document.createElement('option');
            option.value = color;
            option.textContent = color;
            highlightColorSelect.appendChild(option);
        });
    } catch (error) {
        console.error('Error loading filters:', error);
    }
}

// Fetch highlights from the API
async function loadHighlights() {
    try {
        const response = await fetch('/api/highlights');
        highlights = await response.json();
        filterAndDisplayHighlight();
    } catch (error) {
        console.error('Error loading highlights:', error);
        highlightText.textContent = 'Error loading highlights. Please try again later.';
        updateGridLayout(false);
    }
}

// Filter highlights based on selected criteria
function filterHighlights() {
    filters = {
        bookTitle: bookTitleSelect.value,
        bookAuthor: bookAuthorSelect.value,
        tags: bookTagsSelect.value,
        color: highlightColorSelect.value
    };

    // Reset current index and history when filters change
    currentHighlightIndex = -1;
    highlightHistory = [];
    historyPosition = -1;
    filterAndDisplayHighlight();
}

// Apply filters and display current highlight
function filterAndDisplayHighlight() {
    filteredHighlights = highlights.filter(highlight => {
        if (!highlight) return false;
        
        const matchesTitle = filters.bookTitle === 'all' || highlight.booktitle === filters.bookTitle;
        const matchesAuthor = filters.bookAuthor === 'all' || highlight.bookauthor === filters.bookAuthor;
        const matchesColor = filters.color === 'all' || highlight.color === filters.color;
        const matchesTags = filters.tags === 'all' ||
            (highlight.tags && highlight.tags.split(',').map(t => t.trim()).includes(filters.tags));

        return matchesTitle && matchesAuthor && matchesColor && matchesTags;
    });

    if (filteredHighlights.length === 0) {
        highlightText.textContent = 'No highlights found with the selected filters.';
        noteContent.textContent = '';
        const metadata = document.getElementById('highlightMetadata');
        if (metadata) metadata.textContent = '';
        updateGridLayout(false);
        return;
    }

    // Get new random index different from current
    currentHighlightIndex = getNewRandomIndex(filteredHighlights.length, currentHighlightIndex);
    const selectedHighlight = filteredHighlights[currentHighlightIndex];
    
    if (selectedHighlight && selectedHighlight.highlight) {
        displayHighlight(selectedHighlight);
    } else {
        console.error('Invalid highlight data:', selectedHighlight);
        highlightText.textContent = 'Error: Could not display highlight. Please try again.';
        updateGridLayout(false);
    }

    // Set up keyboard navigation
    document.onkeydown = (e) => {
        let newIndex;
        let newHighlight;
        
        // Right or Down: Next random highlight
        if (e.key === 'ArrowRight' ) {
            newIndex = getNewRandomIndex(filteredHighlights.length, currentHighlightIndex);
            newHighlight = filteredHighlights[newIndex];
            
            if (newHighlight && newHighlight.highlight) {
                // Add to history only when moving forward
                if (historyPosition < highlightHistory.length - 1) {
                    // If we're in the middle of history, truncate forward history
                    highlightHistory = highlightHistory.slice(0, historyPosition + 1);
                }
                highlightHistory.push(newIndex);
                historyPosition = highlightHistory.length - 1;
                
                currentHighlightIndex = newIndex;
                displayHighlight(newHighlight);
            }
        }
        // Left or Up: Go back in history
        else if (e.key === 'ArrowLeft' ) {
            if (historyPosition > 0) {
                historyPosition--;
                newIndex = highlightHistory[historyPosition];
                newHighlight = filteredHighlights[newIndex];
                
                if (newHighlight && newHighlight.highlight) {
                    currentHighlightIndex = newIndex;
                    displayHighlight(newHighlight);
                }
            }
        }
    };
}

// Display a single highlight
function displayHighlight(highlight) {
    if (!highlight || !highlight.highlight) {
        console.error('Invalid highlight data in displayHighlight:', highlight);
        updateGridLayout(false);
        return;
    }

    // Detect language and add appropriate class/attributes
    const text = highlight.highlight;
    const hasChineseCharacters = /[\u4e00-\u9fa5]/.test(text);

    // Set the highlight text with appropriate language attributes
    highlightText.textContent = text;
    if (hasChineseCharacters) {
        highlightText.setAttribute('lang', 'zh-CN');
        highlightText.classList.add('chinese-text');
    } else {
        highlightText.removeAttribute('lang');
        highlightText.classList.remove('chinese-text');
    }

    // Create or update the metadata element
    let highlightMetadata = document.getElementById('highlightMetadata');
    if (!highlightMetadata) {
        highlightMetadata = document.createElement('div');
        highlightMetadata.classList.add('highlight-metadata');
        highlightMetadata.id = 'highlightMetadata';
        // Append to highlight-card
        const highlightCard = document.querySelector('.highlight-card');
        highlightCard.appendChild(highlightMetadata);
    }

    // Set the metadata content
    const metadataContent = `
${highlight.booktitle ? `Book: ${highlight.booktitle}` : ''}
${highlight.bookauthor ? `\nAuthor: ${highlight.bookauthor}` : ''}
${highlight.tags ? `\nTags: ${highlight.tags}` : ''}
    `;

    highlightMetadata.textContent = metadataContent.trim();

    // Display note if available and update grid layout
    const note = highlight.note || '';
    noteContent.textContent = note;
    updateGridLayout(!!note);

    if (hasChineseCharacters) {
        noteContent.setAttribute('lang', 'zh-CN');
        noteContent.classList.add('chinese-text');
    } else {
        noteContent.removeAttribute('lang');
        noteContent.classList.remove('chinese-text');
    }
}

///////////

// Create a class for the searchable select
class SearchableSelect {
    constructor(originalSelect) {
        this.originalSelect = originalSelect;
        this.options = Array.from(originalSelect.options);
        this.setupSearchableSelect();
    }

    setupSearchableSelect() {
        // Create container
        this.container = document.createElement('div');
        this.container.className = 'searchable-select-container';

        // Create input
        this.input = document.createElement('input');
        this.input.type = 'text';
        this.input.className = 'searchable-select-input';
        this.input.placeholder = this.originalSelect.querySelector('option').textContent;

        // Create dropdown
        this.dropdown = document.createElement('div');
        this.dropdown.className = 'searchable-select-dropdown';

        // Add elements to container
        this.container.appendChild(this.input);
        this.container.appendChild(this.dropdown);

        // Insert the new elements
        this.originalSelect.style.display = 'none';
        this.originalSelect.parentNode.insertBefore(this.container, this.originalSelect.nextSibling);

        // Setup event listeners
        this.setupEventListeners();
    }

    setupEventListeners() {
        // Input event listeners
        this.input.addEventListener('focus', () => this.showDropdown());
        this.input.addEventListener('input', () => this.filterOptions());

        // Click outside to close
        document.addEventListener('click', (e) => {
            if (!this.container.contains(e.target)) {
                this.hideDropdown();
            }
        });

        // Prevent dropdown from closing when clicking inside
        this.dropdown.addEventListener('click', (e) => {
            e.stopPropagation();
        });
    }

    showDropdown() {
        this.dropdown.classList.add('active');
        this.renderOptions(this.options);
    }

    hideDropdown() {
        this.dropdown.classList.remove('active');
    }

    filterOptions() {
        const searchTerm = this.input.value.toLowerCase();
        const filteredOptions = this.options.filter(option => 
            option.textContent.toLowerCase().includes(searchTerm)
        );
        this.renderOptions(filteredOptions);
    }

    renderOptions(options) {
        this.dropdown.innerHTML = '';
        options.forEach(option => {
            const div = document.createElement('div');
            div.className = 'searchable-select-option';
            div.textContent = option.textContent;
            div.addEventListener('click', () => {
                this.selectOption(option);
            });
            this.dropdown.appendChild(div);
        });
    }

    selectOption(option) {
        this.originalSelect.value = option.value;
        this.input.value = option.textContent;
        this.hideDropdown();
        // Trigger change event on original select
        this.originalSelect.dispatchEvent(new Event('change'));
    }
}

// Initialize searchable selects
function initializeSearchableSelects() {
    const selects = [
        document.getElementById('bookTitle'),
        document.getElementById('bookAuthor'),
        document.getElementById('bookTags'),
        document.getElementById('highlightColor')
    ];

    selects.forEach(select => {
        if (select) {
            new SearchableSelect(select);
        }
    });
}

// Add to your existing init function
async function init() {

    // Note: No need for the original event listeners as they're handled by the SearchableSelect class
}




// Initialize the application
async function init() {
    await loadFilters();
    await loadHighlights();

    // Initialize searchable selects after filters are loaded
    initializeSearchableSelects();
    // Add event listeners for filter changes
    bookTitleSelect.addEventListener('change', filterHighlights);
    bookAuthorSelect.addEventListener('change', filterHighlights);
    bookTagsSelect.addEventListener('change', filterHighlights);
    highlightColorSelect.addEventListener('change', filterHighlights);
}

// Start the application
init();
