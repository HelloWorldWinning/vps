from fastapi import FastAPI, HTTPException, Depends
from fastapi.security import HTTPBasic, HTTPBasicCredentials
from fastapi.responses import FileResponse, HTMLResponse
import os
from urllib.parse import quote, unquote
import secrets
from datetime import datetime
from typing import List
import mimetypes
import html

app = FastAPI()
security = HTTPBasic()

# Constants
HOST_ROOT = '/Host'  # Mount point of the host filesystem
TEXT_FILE_EXTENSIONS = ['.txt', '.py', '.sh', '.log', '.cfg', '.conf', '.ini', 
                       '.json', '.yaml', '.yml', '.md', '.rst', '.csv', '.tsv', 
                       '.bat', '.sql', '.css', '.js', '.xml', '.service', '.socket']

def format_size(size_in_bytes: int) -> str:
    """Convert size in bytes to human readable format."""
    for unit in ['B', 'KB', 'MB', 'GB', 'TB']:
        if size_in_bytes < 1024.0:
            return f"{size_in_bytes:.1f} {unit}"
        size_in_bytes /= 1024.0
    return f"{size_in_bytes:.1f} PB"

def get_file_info(path: str) -> dict:
    """Get file/directory information including size and modification time."""
    stats = os.stat(path)
    return {
        'size': stats.st_size,
        'modified': datetime.fromtimestamp(stats.st_mtime).strftime('%Y-%m-%d %H:%M:%S')
    }

def create_breadcrumb(path: str) -> str:
    """Create HTML breadcrumb navigation from path."""
    if path == '/':
        return '<a href="/" class="breadcrumb-item">/</a>'

    parts = path.split('/')
    breadcrumb_parts = []
    current_path = ''

    breadcrumb_parts.append('<a href="/" class="breadcrumb-item">/</a>')

    for part in parts:
        if part:
            current_path = os.path.join(current_path, part)
            encoded_path = quote(current_path.lstrip('/'))
            breadcrumb_parts.append(
                f'<a href="/{encoded_path}" class="breadcrumb-item">{part}</a>/'
            )

    return ''.join(breadcrumb_parts)

def authenticate(credentials: HTTPBasicCredentials = Depends(security)):
    correct_username = "a"
    correct_password = "a"

    is_correct_username = secrets.compare_digest(credentials.username.encode('utf8'),
                                                 correct_username.encode('utf8'))
    is_correct_password = secrets.compare_digest(credentials.password.encode('utf8'),
                                                 correct_password.encode('utf8'))

    if not (is_correct_username and is_correct_password):
        raise HTTPException(
            status_code=401,
            detail="Incorrect username or password",
            headers={"WWW-Authenticate": "Basic"},
        )
    return credentials

@app.get("/{path:path}")
async def read_path(path: str, credentials: HTTPBasicCredentials = Depends(authenticate)):
    # Decode URL-encoded path and normalize
    decoded_path = unquote(path)
    full_path = os.path.normpath(os.path.join(HOST_ROOT, decoded_path))

    # Security checks
    if not full_path.startswith(HOST_ROOT):
        raise HTTPException(status_code=403, detail="Access denied")
    if '..' in decoded_path:
        raise HTTPException(status_code=403, detail="Path traversal not allowed")

    if os.path.isdir(full_path):
        try:
            items = os.listdir(full_path)
        except PermissionError:
            raise HTTPException(status_code=403, detail="Permission denied")

        items.sort()
        breadcrumb = create_breadcrumb(decoded_path or '/')
        table_rows = []

        # Parent directory
        if decoded_path:
            parent_path = os.path.dirname(decoded_path)
            parent_url = quote(parent_path) if parent_path else ''
            parent_info = get_file_info(os.path.dirname(full_path))
            table_rows.append(f'''
                <tr>
                    <td>
                        <div class="item-container">
                            <span class="index-number">-</span>
                            <a href="/{parent_url}" class="folder">../</a>
                        </div>
                    </td>
                    <td class="size-col">-</td>
                    <td>{parent_info['modified']}</td>
                </tr>
            ''')

        # Directory contents
        for idx, item in enumerate(items, 1):
            item_path = os.path.join(decoded_path, item)
            item_full_path = os.path.join(full_path, item)
            item_url = quote(item_path)
            
            item_info = get_file_info(item_full_path)
            is_dir = os.path.isdir(item_full_path)
            
            table_rows.append(f'''
                <tr>
                    <td>
                        <div class="item-container">
                            <span class="index-number">{idx}.</span>
                            <a href="/{item_url}" class="{'folder' if is_dir else 'file'}">
                                {item}{'/' if is_dir else ''}
                            </a>
                        </div>
                    </td>
                    <td class="size-col">{format_size(item_info['size']) if not is_dir else '-'}</td>
                    <td>{item_info['modified']}</td>
                </tr>
            ''')

        html_content = f"""
        <html>
        <head>
            <meta charset="UTF-8">
            <link rel="icon" type="image/x-icon" href="https://raw.githubusercontent.com/HelloWorldWinning/vps/main/favicon.ico">
            <style>
                /* Keep existing styles, but remove /Host references */
                body {{ font-family: 'Source Code Pro', monospace; margin: 20px; }}
                table {{ width: 100%; border-collapse: collapse; }}
                th, td {{ padding: 8px; text-align: left; border-bottom: 1px solid #ddd; }}
                .folder {{ color: #1d910d; }}
                .file {{ color: #db0bee; }}
            </style>
        </head>
        <body>
            <div class="breadcrumb">{breadcrumb}</div>
            <table>
                <thead><tr><th>Name</th><th>Size</th><th>Modified</th></tr></thead>
                <tbody>{''.join(table_rows)}</tbody>
            </table>
        </body>
        </html>
        """
        return HTMLResponse(content=html_content)

    elif os.path.isfile(full_path):
        if os.path.splitext(full_path)[1].lower() in TEXT_FILE_EXTENSIONS:
            try:
                with open(full_path, 'r', encoding='utf-8') as f:
                    content = html.escape(f.read())
                return HTMLResponse(f"<pre>{content}</pre>")
            except Exception:
                return FileResponse(full_path)
        return FileResponse(full_path)
    
    raise HTTPException(status_code=404, detail="Path not found")

@app.get("/")
async def root(credentials: HTTPBasicCredentials = Depends(authenticate)):
    return await read_path("", credentials)

if __name__ == "__main__":
    import uvicorn
    uvicorn.run(app, host="0.0.0.0", port=7788)
