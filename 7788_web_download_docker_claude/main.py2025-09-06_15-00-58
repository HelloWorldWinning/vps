from fastapi import FastAPI, HTTPException, Depends
from fastapi.security import HTTPBasic, HTTPBasicCredentials
from fastapi.responses import FileResponse, HTMLResponse
import os
from urllib.parse import quote, unquote
import secrets
from datetime import datetime
from typing import List
import html

app = FastAPI()
security = HTTPBasic()

def format_size(size_in_bytes: int) -> str:
    """Convert size in bytes to human readable format."""
    for unit in ['B', 'KB', 'MB', 'GB', 'TB']:
        if size_in_bytes < 1024.0:
            return f"{size_in_bytes:.1f} {unit}"
        size_in_bytes /= 1024.0
    return f"{size_in_bytes:.1f} PB"

def get_file_info(path: str) -> dict:
    """Get file/directory information including size and modification time."""
    stats = os.stat(path)
    return {
        'size': stats.st_size,
        'modified': datetime.fromtimestamp(stats.st_mtime).strftime('%Y-%m-%d %H:%M:%S')
    }

def create_breadcrumb(url_path: str) -> str:
    """Create HTML breadcrumb navigation from the URL path."""
    # Ensure the path starts with a leading slash
    if not url_path.startswith("/"):
        url_path = "/" + url_path
    if url_path == "/":
        return '<a href="/" class="breadcrumb-item">/</a>'
    parts = url_path.strip("/").split("/")
    breadcrumb_parts = []
    cumulative = ""
    breadcrumb_parts.append('<a href="/" class="breadcrumb-item">/</a>')
    for part in parts:
        cumulative += "/" + part
        encoded_path = quote(cumulative)
        breadcrumb_parts.append(f'<a href="{encoded_path}" class="breadcrumb-item">{part}</a>/')
    return ''.join(breadcrumb_parts)

def authenticate(credentials: HTTPBasicCredentials = Depends(security)):
    correct_username = "a"
    correct_password = "a"
    is_correct_username = secrets.compare_digest(credentials.username.encode('utf8'),
                                                 correct_username.encode('utf8'))
    is_correct_password = secrets.compare_digest(credentials.password.encode('utf8'),
                                                 correct_password.encode('utf8'))
    if not (is_correct_username and is_correct_password):
        raise HTTPException(
            status_code=401,
            detail="Incorrect username or password",
            headers={"WWW-Authenticate": "Basic"},
        )
    return credentials

# List of text file extensions to render in the browser
TEXT_FILE_EXTENSIONS = [
    '.sh',
    '.service', '.socket',
]

@app.get("/{path:path}")
async def read_path(path: str, credentials: HTTPBasicCredentials = Depends(authenticate)):
    # Decode the URL-encoded path (e.g. "root/data")
    path = unquote(path)  # This is the URL path relative to the host's root
    # Handle double slashes by normalizing the path
    while '//' in path:
        path = path.replace('//', '/')

    # Remove leading slash if present to avoid double slash when joining
    if path.startswith('/'):
        path = path.lstrip('/')

    # Map the URL path to the internal file system path by using the mounted /Host directory
    # For example, a URL path of "root/data" becomes internal path "/Host/root/data"
    internal_path = os.path.normpath(os.path.join("/Host", path))

    # Basic security check to prevent directory traversal
    if ".." in internal_path:
        raise HTTPException(status_code=403, detail="Path traversal not allowed")

    if os.path.isdir(internal_path):
        try:
            items = os.listdir(internal_path)
        except PermissionError:
            raise HTTPException(status_code=403, detail="Permission denied")
        items.sort()

        # Build breadcrumb navigation using the URL path (displayed as if rooted at "/")
        breadcrumb = create_breadcrumb("/" + path)

        table_rows: List[str] = []

        # Add parent directory link if not at the root
        if path != "":
            parent_path = os.path.dirname(path)
            parent_url = "/" + parent_path if parent_path else "/"
            parent_internal_path = os.path.dirname(internal_path)
            parent_info = get_file_info(parent_internal_path)
            table_rows.append(f'''
                <tr>
                    <td>
                        <div class="item-container">
                            <span class="index-number">-</span>
                            <a href="{parent_url}" class="folder">../</a>
                        </div>
                    </td>
                    <td class="size-col">-</td>
                    <td>{parent_info['modified']}</td>
                </tr>
            ''')

        # List directory contents
        for idx, item in enumerate(items, 1):
            item_internal_path = os.path.join(internal_path, item)
            # Construct the URL for the item relative to the host's root
            if path:
                item_url = "/" + path.rstrip("/") + "/" + item
            else:
                item_url = "/" + item

            item_info = get_file_info(item_internal_path)

            if os.path.isdir(item_internal_path):
                item_display = f"{item}/"
                item_size = "-"
                item_class = "folder"
            else:
                item_display = item
                item_size = format_size(item_info['size'])
                item_class = "file"

            table_rows.append(f'''
                <tr>
                    <td>
                        <div class="item-container">
                            <span class="index-number">{idx}.</span>
                            <a href="{item_url}" class="{item_class}">{item_display}</a>
                        </div>
                    </td>
                    <td class="size-col">{item_size}</td>
                    <td>{item_info['modified']}</td>
                </tr>
            ''')

        html_content = f"""
        <html>
        <head>
            <meta charset="UTF-8">
            <link rel="icon" type="image/x-icon" href="https://raw.githubusercontent.com/HelloWorldWinning/vps/main/favicon.ico">
            <link href="https://fonts.googleapis.com/css2?family=Source+Code+Pro:wght@400;700&display=swap" rel="stylesheet">
            <meta name="viewport" content="width=device-width, initial-scale=1.0">
            <style>
                @font-face {{
                    font-family: 'FZFangJunHeiS';
                    src: url('https://github.com/HelloWorldWinning/vps/raw/main/folder_font_test/FZFangJunHeiS/FZFangJunHeiS_Regular.ttf') format('truetype');
                }}
                html {{
                    zoom: 200%;
                }}
                body, html * {{
                    font-family: 'Source Code Pro', 'FZFangJunHeiS', monospace;
                }}
                pre, pre * {{
                    font-family: 'Source Code Pro', 'FZFangJunHeiS', monospace;
                    white-space: pre-wrap;
                    word-wrap: break-word;
                }}
                body {{
                    margin: 20px;
                    background-color: #f8f9fa;
                }}
                .breadcrumb {{
                    background-color: white;
                    padding: 12px 15px;
                    margin-bottom: 20px;
                    border-radius: 4px;
                    box-shadow: 0 1px 3px rgba(0,0,0,0.1);
                    font-size: 16px;
                    overflow-x: auto;
                    white-space: nowrap;
                }}
                .breadcrumb-item, .breadcrumb-item *, .breadcrumb > :not(a) {{
                    color: #1d910d;
                    text-decoration: none;
                    transition: color 0.2s;
                    font-size: 200%;
                }}
                .breadcrumb-item:hover {{
                    color: #26cc0e;
                    font-weight: bold;
                }}
                .item-container {{
                    display: flex;
                    align-items: center;
                }}
                .index-number {{
                    min-width: 3.5em;
                    text-align: right;
                    margin-right: 1em;
                    color: #666;
                }}
                table {{
                    border-collapse: collapse;
                    width: 100%;
                    background-color: white;
                    box-shadow: 0 1px 3px rgba(0,0,0,0.1);
                    border-radius: 4px;
                }}
                th, td {{
                    padding: 12px 15px;
                    text-align: left;
                    border-bottom: 1px solid #eee;
                }}
                th {{
                    background-color: #f8f9fa;
                    font-weight: bold;
                    color: #495057;
                }}
                tr:hover {{
                    background-color: #f8f9fa;
                }}
                a {{
                    text-decoration: none;
                }}
                .folder {{
                    background-color: transparent;
                    color: #1d910d;
                    font-weight: bold;
                    font-size: 120%;
                    padding: 3px 8px;
                    border-radius: 4px;
                    transition: background-color 0.2s;
                }}
                .folder:hover {{
                    background-color: transparent;
                }}
                .file {{
                    color: #db0bee;
                    background-color: transparent;
                    font-weight: bold;
                    padding: 3px 8px;
                    border-radius: 4px;
                    transition: background-color 0.2s;
                }}
                .file:hover {{
                    background-color: transparent;
                }}
                .size-col {{
                    font-family: 'Source Code Pro', monospace;
                    text-align: right;
                }}
                h2 {{
                    color: #343a40;
                    margin-bottom: 20px;
                }}
                tr:last-child td {{
                    border-bottom: none;
                }}
            </style>
        </head>
        <body>
            <div class="breadcrumb">
                {breadcrumb}
            </div>
            <table>
                <thead>
                    <tr>
                        <th>Name</th>
                        <th style="text-align: right">Size</th>
                        <th>Modified</th>
                    </tr>
                </thead>
                <tbody>
                    {''.join(table_rows)}
                </tbody>
            </table>
        </body>
        </html>
        """
        return HTMLResponse(content=html_content)

    elif os.path.isfile(internal_path):
        file_extension = os.path.splitext(internal_path)[1].lower()
        if file_extension in TEXT_FILE_EXTENSIONS:
            try:
                with open(internal_path, 'r', encoding='utf-8') as f:
                    content = f.read()
            except UnicodeDecodeError:
                with open(internal_path, 'r', encoding='latin-1') as f:
                    content = f.read()
            content = html.escape(content)
            html_content = f"""
            <html>
            <head>
                <meta charset="UTF-8">
                <link rel="icon" type="image/x-icon" href="https://raw.githubusercontent.com/HelloWorldWinning/vps/main/favicon.ico">
                <title>{os.path.basename(internal_path)}</title>
                <style>
                    body {{
                        font-family: 'Source Code Pro', monospace;
                        white-space: pre-wrap;
                        word-wrap: break-word;
                        background-color: #f8f9fa;
                        margin: 20px;
                    }}
                    pre {{
                        font-family: 'Source Code Pro', monospace;
                        white-space: pre-wrap;
                        word-wrap: break-word;
                    }}
                </style>
            </head>
            <body>
                <h1>{os.path.basename(internal_path)}</h1>
                <pre>{content}</pre>
            </body>
            </html>
            """
            return HTMLResponse(content=html_content)
        else:
            return FileResponse(internal_path)
    else:
        raise HTTPException(status_code=404, detail="Path not found")

if __name__ == "__main__":
    import uvicorn
    uvicorn.run(app, host="0.0.0.0", port=7788, reload=True)

